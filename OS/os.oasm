.text
start:
    ; stack
    MOV $RA, 'A'
    PUSH $RA
    POP $RD
    OUT
    OUT 10

    ; ram
    MOV $RB, 8
    MOV $RD, 'B'
    STOR $RD
    LOAD $RD
    OUT
    OUT 10
    
    ; I/O   
    MOV $RDI, 1
    OUT 'W'
    OUT 'h'
    OUT 'a'
    OUT 't'
    OUT '''
    OUT 's'
    OUT 0x20
    OUT 'y'
    OUT 'o'
    OUT 'u'
    OUT 'r'
    OUT 0x20
    OUT 'n'
    OUT 'a'
    OUT 'm'
    OUT 'e'
    OUT '?'
    OUT 0x20
    CALL @blocking_read
    OUT 'H'
    OUT 'e'
    OUT 'l'
    OUT 'l'
    OUT 'o'
    OUT 0x20
    CALL @print

    _conditions:
        MOV $RA, 1
        OUT '$'
        OUT 'R'
        OUT 'A'
        TEST $RA, 2
        JST @__conditions__else
        
        __conditions__if_RA_bigger:
            OUT '>'
            JMP @__conditions__finally
            
       __conditions__else:
            OUT '<'

        __conditions__finally:
            OUT '2'
            OUT 10

    _addition:
        OUT '1'
        OUT '8'
        OUT '8'
        OUT '+'
        OUT '5'
        OUT '0'
        OUT '='
        MOV $RDI, 188
        ADD $RDI, 50
        CALL @print_number
        OUT 10

    _subtraction:
        OUT '2'
        OUT '3'
        OUT '4'
        OUT '-'
        OUT '2'
        OUT '3'
        OUT '='
        MOV $RDI, 234
        SUB $RDI, 23
        CALL @print_number
        OUT 10

    _multiplication:
        OUT '7'
        OUT '*'
        OUT '5'
        OUT '='
        MOV $RDI, 7
        MUL $RDI, 5
        CALL @print_number
        OUT 10

    _division:
        OUT 0, '8'
        OUT 0, '/'
        OUT 0, '4'
        OUT 0, '='
        MOV $RD, 0x8
        DIV $RD, 0x4
        CALL @print_number
        OUT 10

    _modulo:
        OUT 0, '9'
        OUT 0, '%'
        OUT 0, '4'
        OUT 0, '='
        MOV $RD, 0x9
        MOD $RD, 0x4
        ADD $RD, 0x30
        OUT
        OUT 10

    _shift_left:
        OUT 0, '1'
        OUT 0, '>'
        OUT 0, '>'
        OUT 0, '5'
        OUT 0, '='
        MOV $RDI, 0x1
        SHL $RDI, 0x5
        CALL @print_number
        OUT 10

    _shift_right:
        OUT 0, '8'
        OUT 0, '<'
        OUT 0, '<'
        OUT 0, '3'
        OUT 0, '='
        MOV $RD, 0x8
        SHR $RD, 0x3
        ADD $RD, 0x30
        OUT
        OUT 10

    _XOR:
        OUT 0, '5'
        OUT 0, '7'
        OUT 0, '^'
        OUT 0, '7'
        OUT 0, '5'
        OUT 0, '='
        MOV $RDI, 75
        XOR $RDI, 57
        CALL @print_number
        OUT 10

    _AND:
        OUT 0, '5'
        OUT 0, '&'
        OUT 0, '3'
        OUT 0, '='
        MOV $RD, 0x5
        AND $RD, 0x3
        ADD $RD, 0x30
        OUT
        OUT 10

    _OR:
        OUT 0, '5'
        OUT 0, '|'
        OUT 0, '2'
        OUT 0, '='
        MOV $RD, 0x5
        OR $RD, 0x2
        ADD $RD, 0x30
        OUT
        OUT 10

    _reboot:
        CALL 0, @my_func
        OUT 10
        OUT 'b'
        OUT 'y'
        OUT 'e'
        MOV $RDI, 0xf0
        CALL @blocking_read
        RST

; test func after the ends and should test if the cpu
; can jump to this place
my_func:
    OUT 0, 'y'
    OUT 0, 'a'
    OUT 0, 'y'
    RET

; gets one parameter, a number to print
print_number:
    PUSH $RDI
    TEST $RDI, 100
    JST @__print_number__ST_100
    __print_number__BT_100:
        ; get Xxx digit
        DIV $RDI, 100
        ; make printable
        PUSH $RDI
        POP $RD
        ADD $RD, 0x30
        ; print
        OUT
        JMP @__print_number__BT_10
    
    __print_number__ST_100:
        TEST $RDI, 10
        JST @__print_number__ST_10
        __print_number__BT_10:
            POP $RDI
            PUSH $RDI
            ; get xXx digit
            MOD $RDI, 100
            DIV $RDI, 10
            ; make printable
            PUSH $RDI
            POP $RD
            ADD $RD, 0x30
            ; print 
            OUT

    __print_number__ST_10:
        ; get xxX digit
        POP $RDI
        MOD $RDI, 10
        ; make printable
        PUSH $RDI
        POP $RD
        ; print 
        ADD $RD, 0x30
        OUT

    ; return 
    RET

; gets 1 argument, the initial location for the data
blocking_read:
    PUSH $RDI
    POP $RB
    __blocking_read__get_char:
        GET $RD
        TEST $RD, 0
        JEQ @__blocking_read__get_char
        OUT
        TEST $RD, 10
        JEQ @__blocking_read__return
        __blocking_read__not_zero:
            STOR $RD
            ADD $RB, 1
        JMP @__blocking_read__get_char
    __blocking_read__return:
        RET
    
; gets 1 argument, the initial position of the data
print:
    PUSH $RDI
    POP $RB

    __print__get_char:
        LOAD $RD
        TEST $RD, 0
        JEQ @__print__ret
        __print__not_zero:
            OUT
            ADD $RB, 1
        JMP @__print__get_char
    __print__ret:
    OUT 10
    RET