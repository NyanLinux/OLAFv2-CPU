; This is the Operating System for OLAFv2, written by Itay Saadia (2019).

.rodata
; this section will create an image of the RAM that contains a block of 
; data in the beginning of the memory.

; strings 
char OS_NAME[] = "OLAFv2"
char GET_USERNAME[] = "enter username: "
char NO_COMMAND[] = "command not found"
char GET_FILENAME = "enter filename: "

; commands
char touch[] = "touch"
char rm[] = "rm"
char ls[] = "ls"
char cat[] = "cat"
char cls[] = "cls"
char edit[] = "edit"
char reset[] = "reset"


.data

char username[128]
char command[128]
char filename_input[256]

; files
int last_file_descriptor[1]
int last_file_name[1]
int last_file_data[1]
char file_maps[512]
char files_names[3840]
char files_data[40960]


.text

; boot should be a part of the kernel!
; TODO add jmp here to the kernel
boot:
    CALL @__kernel__boot
    __boot__boot_msg:
        MOV $RDI, #OS_NAME
        CALL @print
        OUT 10

get_username:
    MOV $RDI, #GET_USERNAME
    CALL @print
    NOP
    MOV $RDI, #username
    CALL @blocking_read

prompt:
    MOV $RDI, #username
    CALL @print
    OUT '@'
    MOV $RDI, #OS_NAME
    CALL @print
    OUT '#'
    OUT 0x20

read_command:
    MOV $RDI, #command
    CALL @blocking_read

parse_command:
    NOP
    MOV $RDI, #command
    NOP
    MOV $RSI, #cls
    CALL @strcmp
    TEST $RA, 1
    JEQ @__parse_command__call_cls
    NOP
    MOV $RDI, #command
    NOP
    MOV $RSI, #reset
    CALL @strcmp
    TEST $RA, 1
    JEQ @__parse_command__call_reset
    NOP
    MOV $RDI, #command
    NOP
    MOV $RSI, #touch
    CALL @strcmp
    TEST $RA, 1
    JEQ @__parse_command__call_touch
    __parse_command__command_not_found:
        MOV $RDI, #command
        CALL @print
        OUT ':'
        OUT 0x20
        MOV $RDI, #NO_COMMAND
        CALL @print
        OUT 10
        JMP @prompt
    __parse_command__call_cls:
        CALL @cls
        JMP @prompt
    __parse_command__call_touch:
        CALL @touch
        JMP @prompt
    __parse_command__call_reset:
        CALL @reset

reset:
    OUT 'b'
    OUT 'y'
    OUT 'b'
    CALL @blocking_read
    RST
    
cls:
    OUT 0x0c
    RET

touch: 
    MOV $RDI, #GET_FILENAME
    CALL @print
    NOP
    MOV $RDI, #filename_input
    CALL @blocking_read
    NOP
    MOV $RDI, #filename_input
    CALL @__kernel__create_file
    RET


; get tow arguments, 2 pointers to strings to compare
; gets one parameter, a number to print
print_number:
    PUSH $RDI
    TEST $RDI, 100
    JST @__print_number__ST_100
    __print_number__BT_100:
        ; get Xxx digit
        DIV $RDI, 100
        ; make printable
        PUSH $RDI
        POP $RD
        ADD $RD, 0x30
        ; print
        OUT
        JMP @__print_number__BT_10
    __print_number__ST_100:
        TEST $RDI, 10
        JST @__print_number__ST_10
        __print_number__BT_10:
            POP $RDI
            PUSH $RDI
            ; get xXx digit
            MOD $RDI, 100
            DIV $RDI, 10
            ; make printable
            PUSH $RDI
            POP $RD
            ADD $RD, 0x30
            ; print 
            OUT
    __print_number__ST_10:
        ; get xxX digit
        POP $RDI
        MOD $RDI, 10
        ; make printable
        PUSH $RDI
        POP $RD
        ; print 
        ADD $RD, 0x30
        OUT
    ; return 
    RET


; gets 1 argument, the initial location for the data
blocking_read:
    PUSH $RDI
    POP $RB
    __blocking_read__get_char:
        GET $RD
        TEST $RD, 0
        JEQ @__blocking_read__get_char
        OUT
        TEST $RD, 10
        JEQ @__blocking_read__return
        __blocking_read__not_zero:
            STOR $RD
            ADD $RB, 1
            JMP @__blocking_read__get_char
    __blocking_read__return:
        MOV $RD, 0
        STOR $RD
        RET
    
; gets 1 argument, the initial position of the data
print:
    PUSH $RDI
    POP $RB
    __print__get_char:
        LOAD $RD
        TEST $RD, 0
        JEQ @__print__ret
        __print__not_zero:
            OUT
            ADD $RB, 1
        JMP @__print__get_char
    __print__ret:
    RET

; get 2 arguments, 2 addresses of null - terminated strings to compare
strcmp:
    __strcmp__load_first_value:
        PUSH $RDI
        POP $RB
        LOAD $RA
        ADD $RDI, 1
    __strcmp__load_second_value:
        PUSH $RSI
        POP $RB
        LOAD $RC
        ADD $RSI, 1
    __strcmp__check_if_equals:
        CHMR
        TEST $RA, $RC
        CHMC
        JNE @__strcmp__not_equals
    __strcmp__check_if_end:
        ; if it is true it's means that $RC is also \00 because if we got
        ; here they both equal
        TEST $RA, 0
        JEQ @__strcmp__equals
        JMP @__strcmp__load_first_value
    __strcmp__equals:
        MOV $RA, 1
        JMP @__strcmp__exit
    __strcmp__not_equals:
        MOV $RA, 0
        JMP @__strcmp__exit
    __strcmp__exit:
        RET

strcpy:
    PUSH $RDI
    PUSH $RSI
    __strcpy__copy:
        ; load the data in RDI to RSI
        PUSH $RDI
        POP $RB
        LOAD $RA
        PUSH $RSI
        POP $RB
        STOR $RA
        ; we are testing this after the write because we want to add the null
        TEST $RA, 0
        JEQ @__strcpy__exit
        ADD $RDI, 1
        ADD $RSI, 1
        JMP @__strcpy__copy
    __strcpy__exit:
        POP $RSI
        POP $RDI
        RET

strlen:
    PUSH $RDI
    MOV $RA, 1
    __strlen__count:
        PUSH $RDI
        POP $RB
        LOAD $RC
        TEST $RC, 0
        JEQ @__strlen__exit
        ADD $RA, 1
        ADD $RDI, 1
        JMP @__strlen__count
    __strlen__exit:
        POP $RDI
        RET

; kernel code. this code is related to the abstraction of the Operating System
; and it is not a command (there are commands that use this code, but the user
; shouldn't use these function as command)
kernel:
    ; welcome to the underworld.

    __kernel__boot:
        __kernel__boot__load_filename_address:
            MOV $RB, #last_file_name
            MOV $RA, #files_names
            STOR $RA
        __kernel__boot__load__file_data_address:
            MOV $RB, #last_file_data
            MOV $RA, #files_data
            STOR $RA
        RET

    __kernel__create_file:
        __kernel__create_file__copy_filename:
            ; RDI is the name of the file 
            MOV $RB, #last_file_name
            LOAD $RSI
            ; RSI now contains the new address of the filename
            CALL @strcpy
        __kernel__create_file__update_file_with_his_name:
            ; write to the file his name
            NOP
            MOV $RB, #last_file_descriptor
            LOAD $RB
            ; multiply by 2 because it is the size of the file
            MUL $RB, 2
            ; add to the address of file_maps because we want to reach the address
            ADD $RB, #file_maps
            STOR $RSI 
        __kernel__create_file__increase_last_filename:
            MOV $RB, #last_file_name
            LOAD $RDI
            CALL @strlen
            ; the length is in register $RA
            NOP
            CHMR
            NOP
            ADD $RA, $RDI
            NOP
            CHMC
            NOP
            MOV $RB, #last_file_name
            STOR $RA
            
        CALL @__kernel__increase_last_fd
        RET

        __kernel__increase_last_fd:
            PUSH $RA
            MOV $RB, #last_file_descriptor
            LOAD $RA
            ADD $RA, 1
            STOR $RA
            POP $RA
            RET