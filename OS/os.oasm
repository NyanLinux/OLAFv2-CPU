.text
start:
    ; stack
    MOV $RA, 'A'
    PUSH $RA
    POP $RD
    OUT
    OUT 10
    
    _conditions:
        MOV $RA, 1
        OUT '$'
        OUT 'R'
        OUT 'A'
        TEST $RA, 2
        JST @__conditions__else
        
        __conditions__if_RA_bigger:
            OUT '>'
            JMP $RA, @__conditions__finally
            
       __conditions__else:
            OUT '<'

        __conditions__finally:
            OUT '2'
            OUT 10

    _addition:
        OUT '8'
        OUT '+'
        OUT '7'
        OUT '='
        MOV $RD, 8
        ADD $RD, 7
        PUSH $RD
        CALL @print_number
        OUT 0, 10

    _subtraction:
        OUT '5'
        OUT '-'
        OUT '4'
        OUT '='
        MOV $RD, '5'
        SUB $RD, 0x4
        OUT
        OUT 0, 10

    _multiplication:
        OUT '2'
        OUT '*'
        OUT '4'
        OUT '='
        MOV $RD, 0x4
        MUL $RD, 0x2
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _division:
        OUT 0, '8'
        OUT 0, '/'
        OUT 0, '4'
        OUT 0, '='
        MOV $RD, 0x8
        DIV $RD, 0x4
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _modulo:
        OUT 0, '9'
        OUT 0, '%'
        OUT 0, '4'
        OUT 0, '='
        MOV $RD, 0x9
        MOD $RD, 0x4
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _shift_left:
        OUT 0, '1'
        OUT 0, '>'
        OUT 0, '>'
        OUT 0, '3'
        OUT 0, '='
        MOV $RD, 0x1
        SHL $RD, 0x3
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _shift_right:
        OUT 0, '8'
        OUT 0, '<'
        OUT 0, '<'
        OUT 0, '3'
        OUT 0, '='
        MOV $RD, 0x8
        SHR $RD, 0x3
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _XOR:
        OUT 0, 0x35
        OUT 0, 94
        OUT 0, 0x37
        OUT 0, 61
        MOV $RD, 0x7
        XOR $RD, 0x5
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _AND:
        OUT 0, '5'
        OUT 0, '&'
        OUT 0, '3'
        OUT 0, '='
        MOV $RD, 0x5
        AND $RD, 0x3
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _OR:
        OUT 0, '5'
        OUT 0, '|'
        OUT 0, '2'
        OUT 0, '='
        MOV $RD, 0x5
        OR $RD, 0x2
        ADD $RD, 0x30
        OUT
        OUT 0, 10

    _reboot:
        CALL 0, @my_func
        OUT 'b'
        OUT 'y'
        OUT 'e'
        RST

; test func after the ends and should test if the cpu
; can jump to this place
my_func:
    NOP
    OUT 0, 'y'
    OUT 0, 'a'
    OUT 0, 'y'
    RET

; gets one parameter, a number to print
print_number:
    MOV $RA, 0
    POP $RA
    TEST $RA, 100
    JST @__print_number__ST_100
        ; get Xxx digit
        DIV $RA, 100
        ; make printable
        ADD $RA, 0x30
        ; print
        PUSH $RA
        POP $RD
        OUT
    
    __print_number__ST_100:
        TEST $RA, 10
        JST @__print_number__ST_10
        ; get xXx digit
        DIV $RA, 10
        ; make printable
        ADD $RA, 0x30
        ; print 
        PUSH $RA
        POP $RD
        OUT

    __print_number__ST_10:
        ; get xxX digit
        MOD $RA, 10
        ; make printable
        ADD $RA, 0x30
        ; print 
        PUSH $RA
        POP $RD
        OUT

    ; return 
    RET